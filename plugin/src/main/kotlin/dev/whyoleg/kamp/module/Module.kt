package dev.whyoleg.kamp.module

import dev.whyoleg.kamp.dependency.*

typealias Module = KampProjectDependency

@PublishedApi
internal data class ModuleResolveResult(val modules: List<ModuleWithPath>, val cls: String)

@PublishedApi
internal data class ModuleWithPath(val name: String, val path: String?)

@PublishedApi
internal fun ModuleResolveResult(ctx: ModuleContext): ModuleResolveResult = ModuleResolveResult(
    ctx.modules(),
    "import dev.whyoleg.kamp.module.*\n\n//Autogenerated with kamp, don't change\n${ctx.classes()}"
)

data class ModuleContext
@PublishedApi
internal constructor(
    private val name: String,
    @PublishedApi
    internal val gradleName: String,
    private val path: String?,
    private val ignore: Boolean,
    @PublishedApi
    internal val inner: MutableList<ModuleContext> = mutableListOf()
) {
    inline operator fun String.invoke(path: String? = null, ignore: Boolean = false, block: ModuleContext.() -> Unit = {}) {
        val n = toLowerCase()
        inner += ModuleContext(n, "$gradleName:$n", path, ignore).apply(block)
    }

    internal fun modules(): List<ModuleWithPath> {
        val current = if (name.isBlank()) emptyList() else listOf(ModuleWithPath(gradleName, path))
        val nested = inner.filterNot(ModuleContext::ignore).flatMap(ModuleContext::modules)
        return current + nested
    }

    internal fun classes(): String {
        val n =
            name.takeIf(String::isNotBlank)
                ?.map { it.takeIf(Char::isLetterOrDigit)?.toString() ?: "_" }
                ?.joinToString("")
                ?.let { if (it[0].isDigit()) "_$it" else it }
        return when {
            inner.isNotEmpty() -> "\nobject ${n ?: "Modules"} {${inner.classes()}\n}"
            n != null          -> "val $n = Module(\"$gradleName\")"
            else               -> error("No modules in root")
        }
    }

    private fun List<ModuleContext>.classes(): String =
        joinToString("\n", "\n", transform = ModuleContext::classes).lines().joinToString("\n") { "    $it" }

}

@PublishedApi
internal inline fun resolveModules(block: ModuleContext.() -> Unit): ModuleResolveResult =
    ModuleResolveResult(ModuleContext("", "", null, false).apply(block))
